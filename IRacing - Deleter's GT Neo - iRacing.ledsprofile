{
  "EmbeddedJavascript": null,
  "GlobalBrightness": 50.0,
  "GlobalBrightnessPreset": {
    "CurrentMode": 0,
    "Brightness": 50.0,
    "BrightnessSettings": {}
  },
  "LedContainers": [
    {
      "LedContainers": [
        {
          "Delay": 140,
          "ScrollMode": 0,
          "LedContainers": [
            {
              "StartColor": "Orange",
              "EndColor": "Purple",
              "MaximumValue": 100.0,
              "MinimumValue": 0.0,
              "BlinkFormula": {
                "Expression": ""
              },
              "EnabledFormula": {
                "Expression": ""
              },
              "ValueFormula": {
                "Expression": "100"
              },
              "LedCount": 12,
              "GradientOnAll": false,
              "ClearWhenOut": false,
              "UseLedDimming": true,
              "BlinkDelay": 500,
              "BlinkEnabled": false,
              "ContainerType": "CustomGradient"
            }
          ],
          "StartPosition": 35,
          "ContainerType": "Groups.ScrollGroup",
          "Description": "BOTTOM LEFT ROTARY"
        },
        {
          "Delay": 140,
          "ScrollMode": 1,
          "LedContainers": [
            {
              "StartColor": "Purple",
              "EndColor": "Orange",
              "MaximumValue": 100.0,
              "MinimumValue": 0.0,
              "BlinkFormula": {
                "Expression": ""
              },
              "EnabledFormula": {
                "Expression": ""
              },
              "ValueFormula": {
                "Expression": "100"
              },
              "LedCount": 12,
              "GradientOnAll": false,
              "ClearWhenOut": false,
              "UseLedDimming": true,
              "BlinkDelay": 500,
              "BlinkEnabled": false,
              "ContainerType": "CustomGradient"
            }
          ],
          "StartPosition": 47,
          "ContainerType": "Groups.ScrollGroup",
          "Description": "BOTTOM RIGHT ROTARY"
        }
      ],
      "ContainerType": "Base.Group",
      "Description": "BOTTOM ROTARY COLOUR CYCLE",
      "IsEnabled": false
    },
    {
      "ContentFormula": {
        "JSExt": 0,
        "Interpreter": 1,
        "Expression": "// ROTARIES\r\n\r\n// DON'T TOUCH\r\nlet tcRotary = {}; let absRotary = {}; let fuelRotary = {}; let p2pRotary = {}; let bbRotary = {};\r\n// DON'T TOUCH\r\n\r\n// --- Global Config ---\r\n// Here you can apply effects to different rotaries:\r\n// 1: top left, 2: top right, 3: bottom left, 4: bottom right, false = no effect\r\n// Must be one of the following: 'tcRotary', 'absRotary', 'fuelRotary',\r\n// 'p2pRotary', 'bbRotary', false\r\nlet rotaries = [\r\n\ttcRotary,\r\n\tabsRotary,\r\n\tbbRotary,\r\n\tfuelRotary\r\n];\r\n\r\n// Blinkers Settings\r\nlet flashTime    = 0.5;   // Seconds between flashes\r\n\r\n// -- TC Rotary Config ---\r\nlet tcRotaryOffset = -3; \t\t  // Moves the start position for the lights on this effect\r\nlet tcLevelC  \t   = '#fffc9803'; // ARGB colour for TC level\r\nlet tcBgC          = '#660390fc'; // ARGB colour for background\r\nlet tcOffC         = '#ffff0000'; // ARGB colour for off position\r\n\r\n// -- ABS Rotary Config ---\r\nlet absRotaryOffset = -3; \t\t   // Moves the start position for the lights on this effect\r\nlet absLevelC  \t    = '#ff00ff00'; // ARGB colour for ABS level\r\nlet absBgC          = '#667f03fc'; // ARGB colour for background\r\nlet absOffC         = '#ffff0000'; // ARGB colour for off position\r\n\r\n// -- Fuel Rotary Config ---\r\nlet fuelRotaryOffset = -3;    // Moves the start position for the lights on this effect\r\nlet fuelMirrored \t = false;  // Mirrors to fill the entire rotary instead of just half\r\nlet fuelBgC  \t     = '#2000ff00'; // ARGB colour for unfilled fuel segment\r\nlet fuelSeg          = '#ff00ff00'; // ARGB colour for filled fuel segment\r\nlet fuelLastSegBgC   = '#22ff0000'; // ARGB colour for last segment background\r\nlet fuelLastSegC     = '#ffff0000'; // ARGB colour for last segment on\r\nlet fuelFlashC       = '#ffff0000'; // ARGB colour for pit lap warning flash\r\n\r\n// -- BB Rotary Config ---\r\nlet bbLevelC  \t   = '#ffffffff'; // ARGB colour for active BB segment\r\nlet bbBgC          = '#22ffffff'; // ARGB colour for background segments\r\nlet bbMiddleC      = '#ff0000ff'; // ARGB colour for active default BB\r\nlet bbMiddleBgC    = '#220000ff'; // ARGB colour for inactive default BB\r\nlet bbOrientation  = 'right'; \t  // Whether mid point is shown on left or right of rotary,\r\n\t\t\t\t\t\t\t\t  // do not change after game start\r\n\r\n// -- P2P Rotary Config ---\r\nlet p2pRotaryOffset = -3; \t\t  // Moves the start position for the lights on this effect\r\nlet p2pLevelC  \t    = '#ffeb8f34'; // ARGB colour for p2p available segments\r\nlet p2pBgC          = '#22eb8f34'; // ARGB colour for background\r\nlet p2pActivated    = '#ff00ff00'; // ARGB colour for activated flash\r\nlet p2pNoneC        = '#ffff0000'; // ARGB colour for none left\r\n\r\n\r\n// END CONFIG - Dragons below\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// -- Blinker Loop --\r\n\r\nlet time = timespantoseconds($prop('DataCorePlugin.CurrentDateTime'));\r\n    \r\nif (root.toggle == null) {\r\n    root.toggle = false;\r\n    root.triggerTime = time;\r\n    delay = flashTime;\r\n}    \r\nif (time - root.triggerTime >= delay) {    \r\n    root.toggle = !root.toggle;\r\n    root.triggerTime = time;\r\n}\r\n\r\n// -- End Blinker Loop\r\n\r\n\r\n// -- TC Rotary --\r\n\r\n// Set up light array.\r\ntcRotary.leds = Array(12).fill(tcBgC);\r\n\r\n// Blackout off (position 0)\r\ntcRotary.leds.splice(0, 1, '#00000000');\r\n\r\n// Light up current level (off is red)\r\nif($prop('TCLevel') == 12 || $prop('TCLevel') == 0) {\r\n\ttcRotary.leds.splice(0, 1, tcOffC);\r\n} else {\r\n\ttcRotary.leds.splice($prop('TCLevel'), 1, tcLevelC);\r\n}\r\n\r\n// Shift lights by offset\r\ntcRotary.leds = move(tcRotary.leds, tcRotaryOffset);\r\n\r\n// -- End TC Rotary --\r\n\r\n\r\n// -- ABS Rotary --\r\n\r\n// Set up light array.\r\nabsRotary.leds = Array(12).fill(absBgC);\r\n\r\n// Blackout off (position 0)\r\nabsRotary.leds.splice(0, 1, '#00000000');\r\n\r\n// Light up current level (off is red)\r\nif($prop('ABSLevel') == 12 || $prop('ABSLevel') == 0) {\r\n\tabsRotary.leds.splice(0, 1, absOffC);\r\n} else {\r\n\tabsRotary.leds.splice($prop('ABSLevel'), 1, absLevelC);\r\n}\r\n\r\n// Shift lights by offset\r\nabsRotary.leds = move(absRotary.leds, absRotaryOffset);\r\n\r\n// -- End ABS Rotary --\r\n\r\n\r\n// -- P2P Rotary --\r\n\r\n// Set up light array.\r\np2pRotary.leds = Array(12).fill(p2pBgC);\r\n\r\n// Blackout off (position 0)\r\np2pRotary.leds.splice(0, 1, '#00000000');\r\n\r\n// Light up current level (unavailable is red)\r\nif($prop('GameRawData.Telemetry.PlayerP2P_Count') < 1) {\r\n\tp2pRotary.leds.splice(0, 1, p2pNoneC);\r\n} else {\r\n\tp2pRotary.leds.splice(1, $prop('GameRawData.Telemetry.PlayerP2P_Count'), Array($prop('GameRawData.Telemetry.PlayerP2P_Count')).fill(p2pLevelC));\r\n}\r\n\r\n// P2P Active blinkers\r\nif (root.toggle && $prop('GameRawData.Telemetry.PlayerP2P_Status')) {\r\n\r\n\t\tlet p2pActiveSegments = Array(12).fill(p2pActivated);\r\n\r\n\t\tp2pRotary.leds.splice(0, 12, ...p2pActiveSegments);\r\n}\r\n\r\n// Shift lights by offset\r\np2pRotary.leds = move(p2pRotary.leds, p2pRotaryOffset);\r\n\r\n// -- End P2P Rotary --\r\n\r\n// -- BB Rotary --\r\n\r\n// Set up light array.\r\nbbRotary.leds = Array(12).fill(bbBgC);\r\n\r\n// Blackout opposite middle (position 0)\r\nbbRotary.leds.splice(0, 1, bbMiddleBgC);\r\n\r\n// Blackout opposite middle (position 12)\r\nbbRotary.leds.splice(6, 1, '#00000000');\r\n\r\nif ($prop('GameRawData.Telemetry.CamCameraState') == 80) {\r\n    if (!root.bbCacheSet && $prop('GameRawData.SessionData.CarSetup.UpdateCount') != root.bbSetUpdateCount) {\r\n        root.bbOriginal       = $prop('BrakeBias');\r\n        root.bbLast           = $prop('BrakeBias');\r\n        root.bbPos            = 0;\r\n        root.bbSetUpdateCount = $prop('GameRawData.SessionData.CarSetup.UpdateCount');\r\n        root.bbCacheSet       = true;\r\n    }\r\n} else {\r\n    root.bbCacheSet = false;\r\n}\r\n\r\nif ($prop('BrakeBias') > root.bbLast) {\r\n    if (bbOrientation == 'right') {\r\n        root.bbPos--;\r\n    } else {\r\n        root.bbPos++;\r\n    }\r\n} else if ($prop('BrakeBias') < root.bbLast) {\r\n    if (bbOrientation == 'right') {\r\n        root.bbPos++;\r\n    } else {\r\n        root.bbPos--;\r\n    }\r\n}\r\n\r\nroot.bbLast = $prop('BrakeBias');\r\n\r\nif($prop('GameRawData.Telemetry.CamCameraState') == 80) {\r\n\r\n    if (root.bbPos < -5) {\r\n        bbRotary.leds.splice(-5, 1, bbLevelC);\r\n    } else if (root.bbPos > 5) {\r\n        bbRotary.leds.splice(5, 1, bbLevelC);\r\n    } else {\r\n        bbRotary.leds.splice(root.bbPos, 1, bbLevelC);\r\n    }\r\n\r\n    if ($prop('BrakeBias') == root.bbOriginal) {\r\n        bbRotary.leds.splice(0, 1, bbMiddleC);\r\n    } else {\r\n        bbRotary.leds.splice(0, 1, bbMiddleBgC);\r\n    }\r\n\r\n}\r\n\r\n// Shift lights by offset\r\nif (bbOrientation == 'right') {\r\n\tbbRotary.leds = move(bbRotary.leds, 3);\r\n} else {\r\n\tbbRotary.leds = move(bbRotary.leds, -3);\r\n}\r\n\r\n// -- End BB Rotary --\r\n\r\n// -- Fuel Rotary --\r\n\r\n// Set up light array.\r\nfuelRotary.leds = Array(12).fill(fuelBgC, 1, 7);\r\n\r\n// Calculate segments from maximum tank size for session. E.g. 50L for GT3 Sprint\r\nlet sessionTankLitres = $prop('GameRawData.SessionData.DriverInfo.DriverCarFuelMaxLtr') * $prop('GameRawData.SessionData.DriverInfo.DriverCarMaxFuelPct');\r\n\r\n// Fix for out of session values\r\nif (sessionTankLitres == 0) {\r\n\tsessionTankLitres = 1;\r\n}\r\n\r\nlet tankSegments = sessionTankLitres / 7;\r\n\r\ntankSegments = $prop('Fuel') / tankSegments;\r\n\r\nlet filledSegments = Array(Math.round(tankSegments)).fill(fuelSeg);\r\n\r\n// Remove first segment\r\nfilledSegments.shift();\r\n\r\nfuelRotary.leds.splice(1, filledSegments.length, ...filledSegments);\r\n\r\n// Idle low fuel.\r\nfuelRotary.leds.splice(0, 1, fuelLastSegBgC);\r\n\r\n// Fuel blinkers\r\nif (root.toggle) {\r\n\t// No green segments, blink red segment\r\n\tif (Math.round(tankSegments) == 0) {\r\n\t\tfuelRotary.leds.splice(0, 1, fuelLastSegC);\r\n\t}\r\n\t// Must pit this lap, blink all segments red\r\n\tif ($prop('DataCorePlugin.Computed.Fuel_RemainingLaps') < 2 && $prop('DataCorePlugin.Computed.Fuel_RemainingLaps') != 0) {\r\n\t\r\n\t\tlet boxLapSegments = Array(7).fill(fuelFlashC);\r\n\r\n\t\tfuelRotary.leds.splice(0, 7, ...boxLapSegments);\r\n\t}\r\n}\r\n\r\n// Encoder mirroring to bottom half is enabled\r\nif (fuelMirrored) {\r\n\tfor (let i = 1; i < 6; i++) {\r\n\t\tfuelRotary.leds[12 - i] = fuelRotary.leds[i];\r\n\t}\r\n}\r\n\r\n// Shift lights by offset\r\nfuelRotary.leds = move(fuelRotary.leds, fuelRotaryOffset);\r\n\r\n// -- End Fuel Rotary --\r\n\r\n\r\n// -- Track Wetness Rotary --\r\n//$prop('GameRawData.Telemetry.TrackWetness') 1 = dry, 7 = waterlogged\r\n// -- End Track Wetness Rotary --\r\n\r\n// -- Output LED Array --\r\n// Combines all rotary arrays into one array\r\nlet ledArray = [];\r\nrotaries.forEach(element => {\r\n    if (element.leds) {\r\n\t\tledArray = ledArray.concat(element.leds);\r\n\t} else {\r\n\t\tledArray = ledArray.concat(Array(12).fill('#00000000'));\r\n\t}\r\n});\r\n\r\nreturn ledArray;\r\n",
        "PreExpression": "//returns a new array with the items shifted\r\nfunction move(arr, offset=0){\r\n  //positive offsets move right\r\n  const pivot = (offset < 0? 0: arr.length) - offset % arr.length;\r\n  //positive offsets move left\r\n  //const pivot = (offset < 0? arr.length: 0) + offset % arr.length;\r\n  return arr.slice(pivot).concat(arr.slice(0, pivot));\r\n}"
      },
      "LedCount": 48,
      "StartPosition": 11,
      "ContainerType": "ScriptedContent",
      "Description": "ROTARIES"
    },
    {
      "TotalWidth": 10,
      "LedContainers": [
        {
          "StartColor": "Indigo",
          "EndColor": "255, 111, 0",
          "MaximumValue": 100.0,
          "MinimumValue": 0.0,
          "BlinkFormula": {
            "Expression": ""
          },
          "EnabledFormula": {
            "Expression": ""
          },
          "ValueFormula": {
            "Expression": "100"
          },
          "LedCount": 5,
          "GradientOnAll": false,
          "ClearWhenOut": false,
          "UseLedDimming": true,
          "BlinkDelay": 500,
          "BlinkEnabled": false,
          "ContainerType": "CustomGradient"
        }
      ],
      "ContainerType": "Groups.MirrorGroup",
      "Description": "BUTTONS STATIC GRADIENT"
    },
    {
      "LedContainers": [
        {
          "LedCount": 48,
          "Color": "Black",
          "BlinkEnabled": false,
          "ContainerType": "Flags.YellowFlag",
          "Description": "BLACKOUT"
        },
        {
          "LedCount": 48,
          "Color": "Yellow",
          "BlinkEnabled": true,
          "BlinkDelay": 300,
          "ContainerType": "Flags.YellowFlag",
          "Description": "Generates a static effect when the Yellow flag is ON copy"
        }
      ],
      "StartPosition": 11,
      "ContainerType": "Base.Group",
      "Description": "YELLOW FLAGS ROTARIES"
    },
    {
      "LedContainers": [
        {
          "Animation": {
            "Columns": 10,
            "Rows": 1,
            "Frames": [
              {
                "Colors": "",
                "FrameDuration": 250
              },
              {
                "Colors": "0,0,#000000;0,1,#000000;0,2,#000000;0,3,#000000;0,4,#000000;0,5,#000000;0,6,#000000;0,7,#000000;0,8,#000000;0,9,#000000",
                "FrameDuration": 250
              }
            ],
            "PenColor": "0, 0, 0"
          },
          "ContainerType": "Animation"
        }
      ],
      "ContainerType": "Groups.GameCarSpeedLimiterGroup"
    },
    {
      "TriggerFormula": {
        "JSExt": 0,
        "Interpreter": 1,
        "Expression": "let time = timespantoseconds($prop('DataCorePlugin.CurrentDateTime'));\r\n\r\nif ($prop('GameRawData.Telemetry.Voltage') > 0 && $prop('GameRawData.Telemetry.CamCameraState') == 80){\r\n\tif (root.triggerTime == null) {\r\n\t    root.triggerTime = time;\r\n\t    delay = 3;\r\n\t}\r\n\t\r\n\tif (time - root.triggerTime <= delay) {    \r\n\t    return true;\r\n\t} else {\r\n\t\treturn false;\r\n\t}\r\n} else {\r\n\troot.triggerTime = null;\r\n\treturn false;\r\n}\r\n"
      },
      "ClearBackgroundWhenActive": true,
      "LedContainers": [
        {
          "TotalWidth": 10,
          "LedContainers": [
            {
              "Delay": 80,
              "ScrollMode": 0,
              "LedContainers": [
                {
                  "StartColor": "Tomato",
                  "EndColor": "Cyan",
                  "MaximumValue": 100.0,
                  "MinimumValue": 0.0,
                  "BlinkFormula": {
                    "Expression": ""
                  },
                  "EnabledFormula": {
                    "Expression": ""
                  },
                  "ValueFormula": {
                    "Expression": "100"
                  },
                  "LedCount": 5,
                  "GradientOnAll": false,
                  "ClearWhenOut": false,
                  "UseLedDimming": true,
                  "BlinkDelay": 500,
                  "BlinkEnabled": false,
                  "ContainerType": "CustomGradient"
                }
              ],
              "ContainerType": "Groups.ScrollGroup",
              "Description": "ANIMATION"
            }
          ],
          "ContainerType": "Groups.MirrorGroup",
          "Description": "BUTTONS"
        },
        {
          "TotalWidth": 24,
          "LedContainers": [
            {
              "Delay": 80,
              "ScrollMode": 0,
              "LedContainers": [
                {
                  "StartColor": "Tomato",
                  "EndColor": "Cyan",
                  "MaximumValue": 100.0,
                  "MinimumValue": 0.0,
                  "BlinkFormula": {
                    "Expression": ""
                  },
                  "EnabledFormula": {
                    "Expression": ""
                  },
                  "ValueFormula": {
                    "Expression": "100"
                  },
                  "LedCount": 12,
                  "GradientOnAll": false,
                  "ClearWhenOut": false,
                  "UseLedDimming": true,
                  "BlinkDelay": 500,
                  "BlinkEnabled": false,
                  "ContainerType": "CustomGradient"
                }
              ],
              "ContainerType": "Groups.ScrollGroup",
              "Description": "ANIMATION"
            }
          ],
          "StartPosition": 11,
          "ContainerType": "Groups.MirrorGroup",
          "Description": "UPPER ROTARIES"
        },
        {
          "TotalWidth": 24,
          "LedContainers": [
            {
              "Delay": 80,
              "ScrollMode": 0,
              "LedContainers": [
                {
                  "StartColor": "Tomato",
                  "EndColor": "Cyan",
                  "MaximumValue": 100.0,
                  "MinimumValue": 0.0,
                  "BlinkFormula": {
                    "Expression": ""
                  },
                  "EnabledFormula": {
                    "Expression": ""
                  },
                  "ValueFormula": {
                    "Expression": "100"
                  },
                  "LedCount": 12,
                  "GradientOnAll": false,
                  "ClearWhenOut": false,
                  "UseLedDimming": true,
                  "BlinkDelay": 500,
                  "BlinkEnabled": false,
                  "ContainerType": "CustomGradient"
                }
              ],
              "ContainerType": "Groups.ScrollGroup",
              "Description": "ANIMATION"
            }
          ],
          "StartPosition": 35,
          "ContainerType": "Groups.MirrorGroup",
          "Description": "LOWER ROTARIES"
        },
        {
          "TotalWidth": 15,
          "LedContainers": [
            {
              "Delay": 80,
              "ScrollMode": 0,
              "LedContainers": [
                {
                  "StartColor": "Cyan",
                  "EndColor": "Tomato",
                  "MaximumValue": 100.0,
                  "MinimumValue": 0.0,
                  "BlinkFormula": {
                    "Expression": ""
                  },
                  "EnabledFormula": {
                    "Expression": ""
                  },
                  "ValueFormula": {
                    "Expression": "100"
                  },
                  "LedCount": 7,
                  "GradientOnAll": false,
                  "ClearWhenOut": false,
                  "UseLedDimming": true,
                  "BlinkDelay": 500,
                  "BlinkEnabled": false,
                  "ContainerType": "CustomGradient"
                }
              ],
              "ContainerType": "Groups.ScrollGroup",
              "Description": "ANIMATION"
            }
          ],
          "StartPosition": 59,
          "ContainerType": "Groups.MirrorGroup",
          "Description": "REV LIGHTS"
        }
      ],
      "ContainerType": "Groups.CustomConditionalGroup",
      "Description": "CAR STARTING EFFECT"
    },
    {
      "TriggerFormula": {
        "Expression": "[GameRawData.Telemetry.Voltage] == 0"
      },
      "LedContainers": [
        {
          "LedCount": 73,
          "Color": "Black",
          "BlinkEnabled": false,
          "ContainerType": "StaticColor"
        }
      ],
      "ContainerType": "Groups.CustomConditionalGroup",
      "Description": "CAR OFF BLACKOUT"
    },
    {
      "TriggerFormula": {
        "JSExt": 0,
        "Interpreter": 1,
        "Expression": "if ($prop('GameRawData.Telemetry.IsReplayPlaying') == 1 && $prop('GameRawData.Telemetry.CamCameraState') != 80) {\r\n\treturn true;\r\n} else {\r\n\treturn false;\r\n}"
      },
      "LedContainers": [
        {
          "LedCount": 73,
          "Color": "Black",
          "BlinkEnabled": false,
          "ContainerType": "StaticColor"
        }
      ],
      "ContainerType": "Groups.CustomConditionalGroup",
      "Description": "SPECTATE BLACKOUT"
    }
  ],
  "TestLedsGameData": {
    "GearEx": 1,
    "FuelMax": 100.0,
    "RPMSMax": 10000.0,
    "TurboMax": 3.5,
    "TurnIndicatorLeftEnabled": false,
    "TurnIndicatorRightEnabled": false,
    "SessionBestDeltaEx": 0.0,
    "AllTimeBestDeltaEx": 0.0,
    "DRSEnabled": false,
    "DRSAvailable": false,
    "MaxRpm": 10000.0,
    "GameRunning": true,
    "Brake": 0.0,
    "GameName": "IRacing",
    "Fuel": 51.530612244897945,
    "RPMPercent": 0.0,
    "RPMRedlineReached": false,
    "SpeedKmh": 0.0,
    "SpeedMph": 0.0,
    "Turbo": 0.0,
    "TurboPercent": 0.0,
    "Gear": "1",
    "IsInPitLane": false,
    "PitLimiterOn": false,
    "AbsEnabled": false,
    "AbsActive": false,
    "TCEnabled": false,
    "TCActive": false,
    "LowFuelAlert": false,
    "SpotterCarLeft": false,
    "SpotterCarRight": false,
    "BlackFlag": false,
    "YellowFlag": false,
    "WhiteFlag": false,
    "BlueFlag": false,
    "GreenFlag": false,
    "CarModel": "Lamborghini Huracan GT3 EVO",
    "CarId": null,
    "CarStartedTime": "2024-03-17T10:13:01.2426284+00:00",
    "SessionBestDelta": 0.0,
    "AllTimeBestDelta": 0.0
  },
  "UseProfileBrightness": true,
  "LastLoaded": "2024-01-08T13:59:03.1755201+00:00",
  "Name": "Deleter's GT Neo - iRacing",
  "ProfileId": "86f5c2d5-89fe-4232-8109-b252bdb1dfad",
  "GameCode": "IRacing",
  "CarChoice": null
}